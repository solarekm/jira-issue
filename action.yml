name: "Create Jira Issue"
description: "Creates a Jira issue or Sub-task with a given summary, description, type, priority, and labels."

inputs:
  jira_server:
    description: "The Jira server URL"
    required: true
  jira_username:
    description: "The Jira username"
    required: true
  jira_api_token:
    description: "The Jira API token"
    required: true
  project_key:
    description: "The Jira project key"
    required: true
  issue_type:
    description: "The type of the issue (e.g., Task, Bug, Story, Sub-task)"
    required: true
  parent_issue_key:
    description: "The key of the parent issue if creating a Sub-task"
    required: false
  assignee:
    description: "Assignee username (optional)"
    required: false
  issue_summary:
    description: "The summary of the issue"
    required: true
  issue_description:
    description: "The description of the issue"
    required: true
  issue_priority:
    description: "The priority of the issue"
    required: true
  issue_labels:
    description: "Comma-separated labels for the issue"
    required: false
  attachment_paths:
    description: "Comma-separated paths of attachments"
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up Python
      id: set-up-python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install dependencies
      id: install-dependencies
      shell: bash
      run: |
        # Check if pip3 is installed, if not install
        command -v pip3 &> /dev/null || { sudo apt update && sudo apt install -y python3-pip; }
        # Check if jira library is installed, if not, install
        pip3 show jira &> /dev/null || pip3 install jira

    - name: Create Jira Issue
      id: create-jira-issue
      shell: python
      run: |
        import os
        from jira import JIRA, JIRAError

        # Retrieve input arguments
        jira_server = "${{ inputs.jira_server }}"
        jira_username = "${{ inputs.jira_username }}"
        jira_api_token = "${{ inputs.jira_api_token }}"
        project_key = "${{ inputs.project_key }}"
        issue_type = "${{ inputs.issue_type }}"
        parent_issue_key = "${{ inputs.parent_issue_key }}"  # Parent issue key
        assignee = "${{ inputs.assignee }}"
        issue_summary = "${{ inputs.issue_summary }}"
        issue_description = """${{ inputs.issue_description }}"""
        issue_priority = "${{ inputs.issue_priority }}"
        issue_labels = "${{ inputs.issue_labels }}"
        attachment_paths = "${{ inputs.attachment_paths }}"  # Comma-separated paths

        # Check if issue_labels is None and split if not
        if issue_labels:
            issue_labels = issue_labels.split(',')
        else:
            issue_labels = []

        # Step: Connecting to Jira
        print(f"Connecting to Jira at {jira_server}...")
        try:
            jira = JIRA(server=jira_server, basic_auth=(jira_username, jira_api_token))
            print("Successfully connected to Jira.")
        except JIRAError as e:
            status_code = e.status_code
            if status_code == 401:
                print("Unauthorized: Invalid login credentials. Please verify your Jira username and API token.")
            elif status_code == 403:
                print("Forbidden: You do not have permission to access this Jira server. Contact your Jira administrator.")
            elif status_code == 404:
                print("Not Found: Check the Jira server URL. The resource could not be found.")
            elif status_code == 429:
                print("Too Many Requests: Rate limit exceeded. Please try again later.")
            elif status_code == 500:
                print("Internal Server Error: An error occurred on the Jira server. Please try again later.")
            elif status_code == 503:
                print("Service Unavailable: The Jira server is temporarily unavailable. Please try again later.")
            else:
                print(f"Failed to connect to Jira: {status_code} - {e.text}")
            exit(1)

        # Step: Validating assignee if provided
        valid_assignee = True  # Flag to determine if the assignee is valid
        if assignee:
            print(f"Validating assignee '{assignee}'...")
            try:
                jira.user(assignee)  # Check if the user exists
                print(f"Assignee '{assignee}' is valid.")
            except JIRAError as e:
                print(f"Assignee '{assignee}' does not exist in Jira. The issue will be created without an assignee.")
                valid_assignee = False  # Mark assignee as invalid

        # Step: Preparing issue data
        print("Preparing issue data...")
        new_issue = {
            'project': {'key': project_key},
            'issuetype': {'name': issue_type},
            'summary': issue_summary,
            'description': issue_description,
            'priority': {'name': issue_priority},
            'labels': issue_labels
        }

        # Step: Adding parent issue if Sub-task
        if parent_issue_key and issue_type.lower() == "sub-task":
            print(f"Adding parent issue '{parent_issue_key}' for Sub-task...")
            new_issue['parent'] = {'key': parent_issue_key}

        # Optional: Add assignee if valid
        if valid_assignee and assignee:
            print(f"Assigning issue to '{assignee}'...")
            new_issue['assignee'] = {'name': assignee}

        # Step: Creating the new issue
        print("Creating the Jira issue...")
        try:
            issue = jira.create_issue(fields=new_issue)
            print(f"Issue {issue.key} has been successfully created.")
            
            # Step: Adding issue creation message to the GitHub summary
            print("Updating GitHub step summary with the issue link...")
            summary_path = os.getenv('GITHUB_STEP_SUMMARY')

            # Read current summary content
            with open(summary_path, 'r') as summary_file:
                existing_summary = summary_file.read()

            # Add the new message at the top
            new_summary = f"Issue [{issue.key}]({jira_server}/browse/{issue.key}) has been created.\n" + existing_summary

            # Write the updated summary back
            with open(summary_path, 'w') as summary_file:
                summary_file.write(new_summary)
            print("GitHub step summary updated successfully.")

        except JIRAError as e:
            # Enhanced error handling
            status_code = e.status_code
            if status_code == 400:
                print("Bad Request: Please check the input data (e.g., project, issue type, required fields).")
            elif status_code == 401:
                print("Unauthorized: Invalid login credentials. Please verify your Jira username and API token.")
            elif status_code == 403:
                print("Forbidden: You do not have permission to create this issue. Contact your Jira administrator.")
            elif status_code == 404:
                print("Not Found: Check the Jira server URL or project key. The resource could not be found.")
            elif status_code == 405:
                print("Method Not Allowed: The request method is not supported by the server. Check the request configuration.")
            elif status_code == 409:
                print("Conflict: A conflict occurred while creating the issue. Please try again.")
            elif status_code == 429:
                print("Too Many Requests: Rate limit exceeded. Please try again later.")
            elif status_code == 500:
                print("Internal Server Error: An error occurred on the Jira server. Please try again later.")
            elif status_code == 502:
                print("Bad Gateway: There are connectivity issues between servers. Please try again later.")
            elif status_code == 503:
                print("Service Unavailable: The Jira server is temporarily unavailable. Please try again later.")
            elif status_code == 504:
                print("Gateway Timeout: The request to the Jira server timed out. Please try again later.")
            else:
                print(f"Failed to create issue: {status_code} - {e.text}")
                print("Contact your Jira administrator for further assistance.")
            exit(1)

        # Optional: Add multiple attachments if provided
        if attachment_paths:
            print("Processing attachments...")
            # Split comma-separated paths into a list
            attachment_paths = [p.strip() for p in attachment_paths.split(',') if os.path.exists(p.strip())]

            if not attachment_paths:
                print("No valid attachment paths provided.")
            else:
                # Loop through each path and add attachment if file exists
                for path in attachment_paths:
                    print(f"Adding attachment '{path}' to issue {issue.key}...")
                    try:
                        with open(path, 'rb') as file:
                            jira.add_attachment(issue=issue, attachment=file)
                        print(f"Attachment {path} has been added to issue {issue.key}.")
                    except JIRAError as e:
                        print(f"Failed to add attachment {path}: {e}")
        else:
            print("No attachments provided.")
