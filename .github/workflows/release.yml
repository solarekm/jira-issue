name: "🚀 Release Management"

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

jobs:
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏷️ Get version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Save changelog to file and output
        echo "$CHANGELOG" > changelog.txt
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: 📋 Prepare release notes
      id: release_notes
      run: |
        # Prepare release notes file
        cat > release_notes.md << 'EOF'
        ## Changes in ${{ steps.get_version.outputs.VERSION }}
        
        ${{ steps.changelog.outputs.CHANGELOG }}
        
        ## Installation
        
        Use this action in your workflow:
        
        ```yaml
        - name: Create Jira Issue
          uses: solarekm/jira-issue@${{ steps.get_version.outputs.VERSION }}
          with:
            jira_server: "https://your-domain.atlassian.net"
            jira_username: ${{ secrets.JIRA_USERNAME }}
            jira_api_token: ${{ secrets.JIRA_API_TOKEN }}
            project_key: "YOUR_PROJECT"
            issue_type: "Task"
            issue_summary: "Your issue title"
            issue_description: "Your issue description"
            issue_priority: "Medium"
        ```
        
        ## What's Changed
        - Enhanced security with input validation
        - Modular architecture for better maintainability
        - Comprehensive error handling
        - Full test coverage
        - Detailed logging and debugging capabilities
        EOF

    - name: 🚀 Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ steps.get_version.outputs.VERSION }}" \
          --title "Release ${{ steps.get_version.outputs.VERSION }}" \
          --notes-file release_notes.md \
          --latest

  update-major-tag:
    name: Update Major Version Tag
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Update major version tag
      run: |
        # Extract major version (e.g., v2.1.0 -> v2)
        VERSION=${GITHUB_REF#refs/tags/}
        MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
        
        # Create or update major version tag
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Delete existing major version tag if it exists
        git tag -d $MAJOR_VERSION 2>/dev/null || true
        git push origin :refs/tags/$MAJOR_VERSION 2>/dev/null || true
        
        # Create new major version tag
        git tag $MAJOR_VERSION
        git push origin $MAJOR_VERSION
        
        echo "Updated major version tag: $MAJOR_VERSION -> $VERSION"